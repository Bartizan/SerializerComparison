// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef PROTOBUF_person_2eproto__INCLUDED
#define PROTOBUF_person_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
namespace SerializerComparison {
class DocumentProtobuf;
class DocumentProtobufDefaultTypeInternal;
extern DocumentProtobufDefaultTypeInternal _DocumentProtobuf_default_instance_;
class PersonProtobuf;
class PersonProtobufDefaultTypeInternal;
extern PersonProtobufDefaultTypeInternal _PersonProtobuf_default_instance_;
}  // namespace SerializerComparison
namespace google {
namespace protobuf {
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace SerializerComparison {

namespace protobuf_person_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_person_2eproto

// ===================================================================

class DocumentProtobuf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SerializerComparison.DocumentProtobuf) */ {
 public:
  DocumentProtobuf();
  virtual ~DocumentProtobuf();

  DocumentProtobuf(const DocumentProtobuf& from);

  inline DocumentProtobuf& operator=(const DocumentProtobuf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentProtobuf& default_instance();

  static inline const DocumentProtobuf* internal_default_instance() {
    return reinterpret_cast<const DocumentProtobuf*>(
               &_DocumentProtobuf_default_instance_);
  }

  void Swap(DocumentProtobuf* other);

  // implements Message ----------------------------------------------

  inline DocumentProtobuf* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentProtobuf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentProtobuf& from);
  void MergeFrom(const DocumentProtobuf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentProtobuf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes Content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .google.protobuf.Timestamp ExpirationDate = 4;
  bool has_expirationdate() const;
  void clear_expirationdate();
  static const int kExpirationDateFieldNumber = 4;
  const ::google::protobuf::Timestamp& expirationdate() const;
  ::google::protobuf::Timestamp* mutable_expirationdate();
  ::google::protobuf::Timestamp* release_expirationdate();
  void set_allocated_expirationdate(::google::protobuf::Timestamp* expirationdate);

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SerializerComparison.DocumentProtobuf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::Timestamp* expirationdate_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct  protobuf_person_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PersonProtobuf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SerializerComparison.PersonProtobuf) */ {
 public:
  PersonProtobuf();
  virtual ~PersonProtobuf();

  PersonProtobuf(const PersonProtobuf& from);

  inline PersonProtobuf& operator=(const PersonProtobuf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonProtobuf& default_instance();

  static inline const PersonProtobuf* internal_default_instance() {
    return reinterpret_cast<const PersonProtobuf*>(
               &_PersonProtobuf_default_instance_);
  }

  void Swap(PersonProtobuf* other);

  // implements Message ----------------------------------------------

  inline PersonProtobuf* New() const PROTOBUF_FINAL { return New(NULL); }

  PersonProtobuf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PersonProtobuf& from);
  void MergeFrom(const PersonProtobuf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PersonProtobuf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SerializerComparison.DocumentProtobuf Documents = 4;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 4;
  const ::SerializerComparison::DocumentProtobuf& documents(int index) const;
  ::SerializerComparison::DocumentProtobuf* mutable_documents(int index);
  ::SerializerComparison::DocumentProtobuf* add_documents();
  ::google::protobuf::RepeatedPtrField< ::SerializerComparison::DocumentProtobuf >*
      mutable_documents();
  const ::google::protobuf::RepeatedPtrField< ::SerializerComparison::DocumentProtobuf >&
      documents() const;

  // string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Timestamp Birthday = 2;
  bool has_birthday() const;
  void clear_birthday();
  static const int kBirthdayFieldNumber = 2;
  const ::google::protobuf::Timestamp& birthday() const;
  ::google::protobuf::Timestamp* mutable_birthday();
  ::google::protobuf::Timestamp* release_birthday();
  void set_allocated_birthday(::google::protobuf::Timestamp* birthday);

  // int32 Age = 1;
  void clear_age();
  static const int kAgeFieldNumber = 1;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SerializerComparison.PersonProtobuf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::SerializerComparison::DocumentProtobuf > documents_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* birthday_;
  ::google::protobuf::int32 age_;
  mutable int _cached_size_;
  friend struct  protobuf_person_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentProtobuf

// int32 Id = 1;
inline void DocumentProtobuf::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 DocumentProtobuf::id() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.DocumentProtobuf.Id)
  return id_;
}
inline void DocumentProtobuf::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:SerializerComparison.DocumentProtobuf.Id)
}

// string Name = 2;
inline void DocumentProtobuf::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocumentProtobuf::name() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.DocumentProtobuf.Name)
  return name_.GetNoArena();
}
inline void DocumentProtobuf::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SerializerComparison.DocumentProtobuf.Name)
}
#if LANG_CXX11
inline void DocumentProtobuf::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SerializerComparison.DocumentProtobuf.Name)
}
#endif
inline void DocumentProtobuf::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SerializerComparison.DocumentProtobuf.Name)
}
inline void DocumentProtobuf::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SerializerComparison.DocumentProtobuf.Name)
}
inline ::std::string* DocumentProtobuf::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SerializerComparison.DocumentProtobuf.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentProtobuf::release_name() {
  // @@protoc_insertion_point(field_release:SerializerComparison.DocumentProtobuf.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentProtobuf::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SerializerComparison.DocumentProtobuf.Name)
}

// bytes Content = 3;
inline void DocumentProtobuf::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocumentProtobuf::content() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.DocumentProtobuf.Content)
  return content_.GetNoArena();
}
inline void DocumentProtobuf::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SerializerComparison.DocumentProtobuf.Content)
}
#if LANG_CXX11
inline void DocumentProtobuf::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SerializerComparison.DocumentProtobuf.Content)
}
#endif
inline void DocumentProtobuf::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SerializerComparison.DocumentProtobuf.Content)
}
inline void DocumentProtobuf::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SerializerComparison.DocumentProtobuf.Content)
}
inline ::std::string* DocumentProtobuf::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:SerializerComparison.DocumentProtobuf.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentProtobuf::release_content() {
  // @@protoc_insertion_point(field_release:SerializerComparison.DocumentProtobuf.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentProtobuf::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:SerializerComparison.DocumentProtobuf.Content)
}

// .google.protobuf.Timestamp ExpirationDate = 4;
inline bool DocumentProtobuf::has_expirationdate() const {
  return this != internal_default_instance() && expirationdate_ != NULL;
}
inline void DocumentProtobuf::clear_expirationdate() {
  if (GetArenaNoVirtual() == NULL && expirationdate_ != NULL) delete expirationdate_;
  expirationdate_ = NULL;
}
inline const ::google::protobuf::Timestamp& DocumentProtobuf::expirationdate() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.DocumentProtobuf.ExpirationDate)
  return expirationdate_ != NULL ? *expirationdate_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* DocumentProtobuf::mutable_expirationdate() {
  
  if (expirationdate_ == NULL) {
    expirationdate_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:SerializerComparison.DocumentProtobuf.ExpirationDate)
  return expirationdate_;
}
inline ::google::protobuf::Timestamp* DocumentProtobuf::release_expirationdate() {
  // @@protoc_insertion_point(field_release:SerializerComparison.DocumentProtobuf.ExpirationDate)
  
  ::google::protobuf::Timestamp* temp = expirationdate_;
  expirationdate_ = NULL;
  return temp;
}
inline void DocumentProtobuf::set_allocated_expirationdate(::google::protobuf::Timestamp* expirationdate) {
  delete expirationdate_;
  if (expirationdate != NULL && expirationdate->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_expirationdate = new ::google::protobuf::Timestamp;
    new_expirationdate->CopyFrom(*expirationdate);
    expirationdate = new_expirationdate;
  }
  expirationdate_ = expirationdate;
  if (expirationdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SerializerComparison.DocumentProtobuf.ExpirationDate)
}

// -------------------------------------------------------------------

// PersonProtobuf

// int32 Age = 1;
inline void PersonProtobuf::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 PersonProtobuf::age() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.PersonProtobuf.Age)
  return age_;
}
inline void PersonProtobuf::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:SerializerComparison.PersonProtobuf.Age)
}

// .google.protobuf.Timestamp Birthday = 2;
inline bool PersonProtobuf::has_birthday() const {
  return this != internal_default_instance() && birthday_ != NULL;
}
inline void PersonProtobuf::clear_birthday() {
  if (GetArenaNoVirtual() == NULL && birthday_ != NULL) delete birthday_;
  birthday_ = NULL;
}
inline const ::google::protobuf::Timestamp& PersonProtobuf::birthday() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.PersonProtobuf.Birthday)
  return birthday_ != NULL ? *birthday_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* PersonProtobuf::mutable_birthday() {
  
  if (birthday_ == NULL) {
    birthday_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:SerializerComparison.PersonProtobuf.Birthday)
  return birthday_;
}
inline ::google::protobuf::Timestamp* PersonProtobuf::release_birthday() {
  // @@protoc_insertion_point(field_release:SerializerComparison.PersonProtobuf.Birthday)
  
  ::google::protobuf::Timestamp* temp = birthday_;
  birthday_ = NULL;
  return temp;
}
inline void PersonProtobuf::set_allocated_birthday(::google::protobuf::Timestamp* birthday) {
  delete birthday_;
  if (birthday != NULL && birthday->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_birthday = new ::google::protobuf::Timestamp;
    new_birthday->CopyFrom(*birthday);
    birthday = new_birthday;
  }
  birthday_ = birthday;
  if (birthday) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SerializerComparison.PersonProtobuf.Birthday)
}

// string Name = 3;
inline void PersonProtobuf::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PersonProtobuf::name() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.PersonProtobuf.Name)
  return name_.GetNoArena();
}
inline void PersonProtobuf::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SerializerComparison.PersonProtobuf.Name)
}
#if LANG_CXX11
inline void PersonProtobuf::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SerializerComparison.PersonProtobuf.Name)
}
#endif
inline void PersonProtobuf::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SerializerComparison.PersonProtobuf.Name)
}
inline void PersonProtobuf::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SerializerComparison.PersonProtobuf.Name)
}
inline ::std::string* PersonProtobuf::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SerializerComparison.PersonProtobuf.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PersonProtobuf::release_name() {
  // @@protoc_insertion_point(field_release:SerializerComparison.PersonProtobuf.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PersonProtobuf::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SerializerComparison.PersonProtobuf.Name)
}

// repeated .SerializerComparison.DocumentProtobuf Documents = 4;
inline int PersonProtobuf::documents_size() const {
  return documents_.size();
}
inline void PersonProtobuf::clear_documents() {
  documents_.Clear();
}
inline const ::SerializerComparison::DocumentProtobuf& PersonProtobuf::documents(int index) const {
  // @@protoc_insertion_point(field_get:SerializerComparison.PersonProtobuf.Documents)
  return documents_.Get(index);
}
inline ::SerializerComparison::DocumentProtobuf* PersonProtobuf::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:SerializerComparison.PersonProtobuf.Documents)
  return documents_.Mutable(index);
}
inline ::SerializerComparison::DocumentProtobuf* PersonProtobuf::add_documents() {
  // @@protoc_insertion_point(field_add:SerializerComparison.PersonProtobuf.Documents)
  return documents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SerializerComparison::DocumentProtobuf >*
PersonProtobuf::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:SerializerComparison.PersonProtobuf.Documents)
  return &documents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SerializerComparison::DocumentProtobuf >&
PersonProtobuf::documents() const {
  // @@protoc_insertion_point(field_list:SerializerComparison.PersonProtobuf.Documents)
  return documents_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace SerializerComparison

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_person_2eproto__INCLUDED
