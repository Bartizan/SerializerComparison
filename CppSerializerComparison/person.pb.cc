// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "person.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SerializerComparison {
class DocumentProtobufDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DocumentProtobuf> {
} _DocumentProtobuf_default_instance_;
class PersonProtobufDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PersonProtobuf> {
} _PersonProtobuf_default_instance_;

namespace protobuf_person_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentProtobuf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentProtobuf, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentProtobuf, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentProtobuf, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentProtobuf, expirationdate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonProtobuf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonProtobuf, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonProtobuf, birthday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonProtobuf, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonProtobuf, documents_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(DocumentProtobuf)},
  { 8, -1, sizeof(PersonProtobuf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentProtobuf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PersonProtobuf_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "person.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _DocumentProtobuf_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PersonProtobuf_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _DocumentProtobuf_default_instance_.DefaultConstruct();
  _PersonProtobuf_default_instance_.DefaultConstruct();
  _DocumentProtobuf_default_instance_.get_mutable()->expirationdate_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _PersonProtobuf_default_instance_.get_mutable()->birthday_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014person.proto\022\024SerializerComparison\032\037go"
      "ogle/protobuf/timestamp.proto\"q\n\020Documen"
      "tProtobuf\022\n\n\002Id\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t\022\017\n\007C"
      "ontent\030\003 \001(\014\0222\n\016ExpirationDate\030\004 \001(\0132\032.g"
      "oogle.protobuf.Timestamp\"\224\001\n\016PersonProto"
      "buf\022\013\n\003Age\030\001 \001(\005\022,\n\010Birthday\030\002 \001(\0132\032.goo"
      "gle.protobuf.Timestamp\022\014\n\004Name\030\003 \001(\t\0229\n\t"
      "Documents\030\004 \003(\0132&.SerializerComparison.D"
      "ocumentProtobufb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 343);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "person.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_person_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentProtobuf::kIdFieldNumber;
const int DocumentProtobuf::kNameFieldNumber;
const int DocumentProtobuf::kContentFieldNumber;
const int DocumentProtobuf::kExpirationDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentProtobuf::DocumentProtobuf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_person_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializerComparison.DocumentProtobuf)
}
DocumentProtobuf::DocumentProtobuf(const DocumentProtobuf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_expirationdate()) {
    expirationdate_ = new ::google::protobuf::Timestamp(*from.expirationdate_);
  } else {
    expirationdate_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:SerializerComparison.DocumentProtobuf)
}

void DocumentProtobuf::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expirationdate_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&expirationdate_) + sizeof(id_));
  _cached_size_ = 0;
}

DocumentProtobuf::~DocumentProtobuf() {
  // @@protoc_insertion_point(destructor:SerializerComparison.DocumentProtobuf)
  SharedDtor();
}

void DocumentProtobuf::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete expirationdate_;
  }
}

void DocumentProtobuf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentProtobuf::descriptor() {
  protobuf_person_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_person_2eproto::file_level_metadata[0].descriptor;
}

const DocumentProtobuf& DocumentProtobuf::default_instance() {
  protobuf_person_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentProtobuf* DocumentProtobuf::New(::google::protobuf::Arena* arena) const {
  DocumentProtobuf* n = new DocumentProtobuf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentProtobuf::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializerComparison.DocumentProtobuf)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && expirationdate_ != NULL) {
    delete expirationdate_;
  }
  expirationdate_ = NULL;
  id_ = 0;
}

bool DocumentProtobuf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializerComparison.DocumentProtobuf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SerializerComparison.DocumentProtobuf.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Content = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp ExpirationDate = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expirationdate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializerComparison.DocumentProtobuf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializerComparison.DocumentProtobuf)
  return false;
#undef DO_
}

void DocumentProtobuf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializerComparison.DocumentProtobuf)
  // int32 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SerializerComparison.DocumentProtobuf.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // bytes Content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // .google.protobuf.Timestamp ExpirationDate = 4;
  if (this->has_expirationdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->expirationdate_, output);
  }

  // @@protoc_insertion_point(serialize_end:SerializerComparison.DocumentProtobuf)
}

::google::protobuf::uint8* DocumentProtobuf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SerializerComparison.DocumentProtobuf)
  // int32 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SerializerComparison.DocumentProtobuf.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // bytes Content = 3;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // .google.protobuf.Timestamp ExpirationDate = 4;
  if (this->has_expirationdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->expirationdate_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializerComparison.DocumentProtobuf)
  return target;
}

size_t DocumentProtobuf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializerComparison.DocumentProtobuf)
  size_t total_size = 0;

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes Content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // .google.protobuf.Timestamp ExpirationDate = 4;
  if (this->has_expirationdate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->expirationdate_);
  }

  // int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentProtobuf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializerComparison.DocumentProtobuf)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentProtobuf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentProtobuf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializerComparison.DocumentProtobuf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializerComparison.DocumentProtobuf)
    MergeFrom(*source);
  }
}

void DocumentProtobuf::MergeFrom(const DocumentProtobuf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializerComparison.DocumentProtobuf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_expirationdate()) {
    mutable_expirationdate()->::google::protobuf::Timestamp::MergeFrom(from.expirationdate());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void DocumentProtobuf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializerComparison.DocumentProtobuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentProtobuf::CopyFrom(const DocumentProtobuf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializerComparison.DocumentProtobuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentProtobuf::IsInitialized() const {
  return true;
}

void DocumentProtobuf::Swap(DocumentProtobuf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentProtobuf::InternalSwap(DocumentProtobuf* other) {
  name_.Swap(&other->name_);
  content_.Swap(&other->content_);
  std::swap(expirationdate_, other->expirationdate_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentProtobuf::GetMetadata() const {
  protobuf_person_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_person_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentProtobuf

// int32 Id = 1;
void DocumentProtobuf::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 DocumentProtobuf::id() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.DocumentProtobuf.Id)
  return id_;
}
void DocumentProtobuf::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:SerializerComparison.DocumentProtobuf.Id)
}

// string Name = 2;
void DocumentProtobuf::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocumentProtobuf::name() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.DocumentProtobuf.Name)
  return name_.GetNoArena();
}
void DocumentProtobuf::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SerializerComparison.DocumentProtobuf.Name)
}
#if LANG_CXX11
void DocumentProtobuf::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SerializerComparison.DocumentProtobuf.Name)
}
#endif
void DocumentProtobuf::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SerializerComparison.DocumentProtobuf.Name)
}
void DocumentProtobuf::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SerializerComparison.DocumentProtobuf.Name)
}
::std::string* DocumentProtobuf::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SerializerComparison.DocumentProtobuf.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocumentProtobuf::release_name() {
  // @@protoc_insertion_point(field_release:SerializerComparison.DocumentProtobuf.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocumentProtobuf::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SerializerComparison.DocumentProtobuf.Name)
}

// bytes Content = 3;
void DocumentProtobuf::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocumentProtobuf::content() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.DocumentProtobuf.Content)
  return content_.GetNoArena();
}
void DocumentProtobuf::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SerializerComparison.DocumentProtobuf.Content)
}
#if LANG_CXX11
void DocumentProtobuf::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SerializerComparison.DocumentProtobuf.Content)
}
#endif
void DocumentProtobuf::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SerializerComparison.DocumentProtobuf.Content)
}
void DocumentProtobuf::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SerializerComparison.DocumentProtobuf.Content)
}
::std::string* DocumentProtobuf::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:SerializerComparison.DocumentProtobuf.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocumentProtobuf::release_content() {
  // @@protoc_insertion_point(field_release:SerializerComparison.DocumentProtobuf.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocumentProtobuf::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:SerializerComparison.DocumentProtobuf.Content)
}

// .google.protobuf.Timestamp ExpirationDate = 4;
bool DocumentProtobuf::has_expirationdate() const {
  return this != internal_default_instance() && expirationdate_ != NULL;
}
void DocumentProtobuf::clear_expirationdate() {
  if (GetArenaNoVirtual() == NULL && expirationdate_ != NULL) delete expirationdate_;
  expirationdate_ = NULL;
}
const ::google::protobuf::Timestamp& DocumentProtobuf::expirationdate() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.DocumentProtobuf.ExpirationDate)
  return expirationdate_ != NULL ? *expirationdate_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* DocumentProtobuf::mutable_expirationdate() {
  
  if (expirationdate_ == NULL) {
    expirationdate_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:SerializerComparison.DocumentProtobuf.ExpirationDate)
  return expirationdate_;
}
::google::protobuf::Timestamp* DocumentProtobuf::release_expirationdate() {
  // @@protoc_insertion_point(field_release:SerializerComparison.DocumentProtobuf.ExpirationDate)
  
  ::google::protobuf::Timestamp* temp = expirationdate_;
  expirationdate_ = NULL;
  return temp;
}
void DocumentProtobuf::set_allocated_expirationdate(::google::protobuf::Timestamp* expirationdate) {
  delete expirationdate_;
  if (expirationdate != NULL && expirationdate->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_expirationdate = new ::google::protobuf::Timestamp;
    new_expirationdate->CopyFrom(*expirationdate);
    expirationdate = new_expirationdate;
  }
  expirationdate_ = expirationdate;
  if (expirationdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SerializerComparison.DocumentProtobuf.ExpirationDate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PersonProtobuf::kAgeFieldNumber;
const int PersonProtobuf::kBirthdayFieldNumber;
const int PersonProtobuf::kNameFieldNumber;
const int PersonProtobuf::kDocumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PersonProtobuf::PersonProtobuf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_person_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializerComparison.PersonProtobuf)
}
PersonProtobuf::PersonProtobuf(const PersonProtobuf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      documents_(from.documents_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_birthday()) {
    birthday_ = new ::google::protobuf::Timestamp(*from.birthday_);
  } else {
    birthday_ = NULL;
  }
  age_ = from.age_;
  // @@protoc_insertion_point(copy_constructor:SerializerComparison.PersonProtobuf)
}

void PersonProtobuf::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&birthday_, 0, reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&birthday_) + sizeof(age_));
  _cached_size_ = 0;
}

PersonProtobuf::~PersonProtobuf() {
  // @@protoc_insertion_point(destructor:SerializerComparison.PersonProtobuf)
  SharedDtor();
}

void PersonProtobuf::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete birthday_;
  }
}

void PersonProtobuf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonProtobuf::descriptor() {
  protobuf_person_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_person_2eproto::file_level_metadata[1].descriptor;
}

const PersonProtobuf& PersonProtobuf::default_instance() {
  protobuf_person_2eproto::InitDefaults();
  return *internal_default_instance();
}

PersonProtobuf* PersonProtobuf::New(::google::protobuf::Arena* arena) const {
  PersonProtobuf* n = new PersonProtobuf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PersonProtobuf::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializerComparison.PersonProtobuf)
  documents_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && birthday_ != NULL) {
    delete birthday_;
  }
  birthday_ = NULL;
  age_ = 0;
}

bool PersonProtobuf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializerComparison.PersonProtobuf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Age = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp Birthday = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_birthday()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SerializerComparison.PersonProtobuf.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SerializerComparison.DocumentProtobuf Documents = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializerComparison.PersonProtobuf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializerComparison.PersonProtobuf)
  return false;
#undef DO_
}

void PersonProtobuf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializerComparison.PersonProtobuf)
  // int32 Age = 1;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->age(), output);
  }

  // .google.protobuf.Timestamp Birthday = 2;
  if (this->has_birthday()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->birthday_, output);
  }

  // string Name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SerializerComparison.PersonProtobuf.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .SerializerComparison.DocumentProtobuf Documents = 4;
  for (unsigned int i = 0, n = this->documents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->documents(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SerializerComparison.PersonProtobuf)
}

::google::protobuf::uint8* PersonProtobuf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SerializerComparison.PersonProtobuf)
  // int32 Age = 1;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->age(), target);
  }

  // .google.protobuf.Timestamp Birthday = 2;
  if (this->has_birthday()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->birthday_, false, target);
  }

  // string Name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SerializerComparison.PersonProtobuf.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .SerializerComparison.DocumentProtobuf Documents = 4;
  for (unsigned int i = 0, n = this->documents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->documents(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializerComparison.PersonProtobuf)
  return target;
}

size_t PersonProtobuf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerializerComparison.PersonProtobuf)
  size_t total_size = 0;

  // repeated .SerializerComparison.DocumentProtobuf Documents = 4;
  {
    unsigned int count = this->documents_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documents(i));
    }
  }

  // string Name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Timestamp Birthday = 2;
  if (this->has_birthday()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->birthday_);
  }

  // int32 Age = 1;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonProtobuf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializerComparison.PersonProtobuf)
  GOOGLE_DCHECK_NE(&from, this);
  const PersonProtobuf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PersonProtobuf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializerComparison.PersonProtobuf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializerComparison.PersonProtobuf)
    MergeFrom(*source);
  }
}

void PersonProtobuf::MergeFrom(const PersonProtobuf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializerComparison.PersonProtobuf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  documents_.MergeFrom(from.documents_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_birthday()) {
    mutable_birthday()->::google::protobuf::Timestamp::MergeFrom(from.birthday());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
}

void PersonProtobuf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializerComparison.PersonProtobuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonProtobuf::CopyFrom(const PersonProtobuf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializerComparison.PersonProtobuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonProtobuf::IsInitialized() const {
  return true;
}

void PersonProtobuf::Swap(PersonProtobuf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PersonProtobuf::InternalSwap(PersonProtobuf* other) {
  documents_.UnsafeArenaSwap(&other->documents_);
  name_.Swap(&other->name_);
  std::swap(birthday_, other->birthday_);
  std::swap(age_, other->age_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PersonProtobuf::GetMetadata() const {
  protobuf_person_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_person_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PersonProtobuf

// int32 Age = 1;
void PersonProtobuf::clear_age() {
  age_ = 0;
}
::google::protobuf::int32 PersonProtobuf::age() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.PersonProtobuf.Age)
  return age_;
}
void PersonProtobuf::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:SerializerComparison.PersonProtobuf.Age)
}

// .google.protobuf.Timestamp Birthday = 2;
bool PersonProtobuf::has_birthday() const {
  return this != internal_default_instance() && birthday_ != NULL;
}
void PersonProtobuf::clear_birthday() {
  if (GetArenaNoVirtual() == NULL && birthday_ != NULL) delete birthday_;
  birthday_ = NULL;
}
const ::google::protobuf::Timestamp& PersonProtobuf::birthday() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.PersonProtobuf.Birthday)
  return birthday_ != NULL ? *birthday_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* PersonProtobuf::mutable_birthday() {
  
  if (birthday_ == NULL) {
    birthday_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:SerializerComparison.PersonProtobuf.Birthday)
  return birthday_;
}
::google::protobuf::Timestamp* PersonProtobuf::release_birthday() {
  // @@protoc_insertion_point(field_release:SerializerComparison.PersonProtobuf.Birthday)
  
  ::google::protobuf::Timestamp* temp = birthday_;
  birthday_ = NULL;
  return temp;
}
void PersonProtobuf::set_allocated_birthday(::google::protobuf::Timestamp* birthday) {
  delete birthday_;
  if (birthday != NULL && birthday->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_birthday = new ::google::protobuf::Timestamp;
    new_birthday->CopyFrom(*birthday);
    birthday = new_birthday;
  }
  birthday_ = birthday;
  if (birthday) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SerializerComparison.PersonProtobuf.Birthday)
}

// string Name = 3;
void PersonProtobuf::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PersonProtobuf::name() const {
  // @@protoc_insertion_point(field_get:SerializerComparison.PersonProtobuf.Name)
  return name_.GetNoArena();
}
void PersonProtobuf::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SerializerComparison.PersonProtobuf.Name)
}
#if LANG_CXX11
void PersonProtobuf::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SerializerComparison.PersonProtobuf.Name)
}
#endif
void PersonProtobuf::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SerializerComparison.PersonProtobuf.Name)
}
void PersonProtobuf::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SerializerComparison.PersonProtobuf.Name)
}
::std::string* PersonProtobuf::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SerializerComparison.PersonProtobuf.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PersonProtobuf::release_name() {
  // @@protoc_insertion_point(field_release:SerializerComparison.PersonProtobuf.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PersonProtobuf::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SerializerComparison.PersonProtobuf.Name)
}

// repeated .SerializerComparison.DocumentProtobuf Documents = 4;
int PersonProtobuf::documents_size() const {
  return documents_.size();
}
void PersonProtobuf::clear_documents() {
  documents_.Clear();
}
const ::SerializerComparison::DocumentProtobuf& PersonProtobuf::documents(int index) const {
  // @@protoc_insertion_point(field_get:SerializerComparison.PersonProtobuf.Documents)
  return documents_.Get(index);
}
::SerializerComparison::DocumentProtobuf* PersonProtobuf::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:SerializerComparison.PersonProtobuf.Documents)
  return documents_.Mutable(index);
}
::SerializerComparison::DocumentProtobuf* PersonProtobuf::add_documents() {
  // @@protoc_insertion_point(field_add:SerializerComparison.PersonProtobuf.Documents)
  return documents_.Add();
}
::google::protobuf::RepeatedPtrField< ::SerializerComparison::DocumentProtobuf >*
PersonProtobuf::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:SerializerComparison.PersonProtobuf.Documents)
  return &documents_;
}
const ::google::protobuf::RepeatedPtrField< ::SerializerComparison::DocumentProtobuf >&
PersonProtobuf::documents() const {
  // @@protoc_insertion_point(field_list:SerializerComparison.PersonProtobuf.Documents)
  return documents_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SerializerComparison

// @@protoc_insertion_point(global_scope)
